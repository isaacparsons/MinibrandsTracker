type Query {
  getMiniBrands: [MiniBrand!]!
  getMiniBrand(id: Int!): MiniBrand!
  getImageUploadLink(name: String!): String!
  getMiniBrandsMetaData: MiniBrandsMetaData!
}

type Mutation {
  saveMiniBrandsMetaData(
    types: [MiniBrandTypeInput!]!
    series: [MiniBrandSeriesInput!]!
    tags: [MiniBrandTagInput!]!
  ): MiniBrandsMetaData!
  saveMiniBrand(input: MiniBrandInput!): MiniBrand!
  updateMiniBrand(id: Int!, input: UpdateMiniBrandInput!): MiniBrand!
  deleteMiniBrand(id: Int!): MiniBrand!
}

type Auth {
  token: String!
  refreshToken: String!
  user: User!
}

type User {
  id: Int!
  email: String!
  passwordHash: String

  collected: [MiniBrand!]!
}

enum ROLE {
  ADMIN
  MEMBER
}

type MiniBrandsMetaData {
  types: [MiniBrandType!]!
  series: [MiniBrandSeries!]!
  tags: [MiniBrandTag!]!
}

type MiniBrand {
  id: Int!
  name: String!
  typeId: Int!
  seriesId: Int!
  imgUrl: String!

  type: MiniBrandType
  series: MiniBrandSeries
  tags: [MiniBrandTag!]!
  users: [User!]
}

input MiniBrandInput {
  name: String!
  typeId: Int!
  seriesId: Int!
  tagIds: [Int!]!
  imgUrl: String!
}

input UpdateMiniBrandInput {
  name: String
  typeId: Int
  seriesId: Int
  tagIds: [Int!]
  imgUrl: String
}

type MiniBrandTag {
  id: Int!
  value: String!

  miniBrands: [MiniBrand!]
}

input MiniBrandTagInput {
  value: String!
}

type MiniBrandType {
  id: Int!
  value: String!

  miniBrands: [MiniBrand!]
}

input MiniBrandTypeInput {
  value: String!
}

type MiniBrandSeries {
  id: Int!
  value: String!

  miniBrands: [MiniBrand!]
}

input MiniBrandSeriesInput {
  value: String!
}
