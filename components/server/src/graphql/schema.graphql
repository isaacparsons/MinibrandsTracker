type Query {
  getOrganizations: [OrganizationMember!]!
  getOrganization(organizationId: Int!): Organization!
  getOrganizationForUser(organizationId: Int!): UserOrganization!
  getOrganizationMembers(organizationId: Int!, cursor: Int): GetOrganizationMembers!
  getAnnouncements(organizationId: Int!, cursor: Int): GetAnnouncements!
  getGroup(groupId: Int!): Group!
  getGroupForUser(groupId: Int!): UserGroup!
  getGroupMembers(groupId: Int!, cursor: Int): GetGroupMembers!
  getEvacuationEvents(groupId: Int!, cursor: Int): GetEvacuationEvents!
  getEvacuationEvent(evacuationId: Int!): EvacuationEvent!
  getInProgressEvacuationEvents: [EvacuationEvent!]!
  getJoinedEntities: User
}
type Mutation {
  resetPassword(email: String!): String!
  login(email: String!, password: String!): Auth!
  token(refreshToken: String!): Auth!
  signup(
    email: String!
    phoneNumber: String!
    password: String!
    firstName: String!
    lastName: String!
  ): Auth!
  deleteUser: User!
  updateUser(phoneNumber: String, password: String, firstName: String, lastName: String): User!
  createGroup(
    organizationId: Int!
    name: String!
    groupNotificationSetting: GroupNotificationSettingInput!
  ): Group!
  deleteGroup(groupId: Int!): Group!
  updateGroupNotificationOptions(
    groupId: Int!
    groupNotificationSetting: GroupNotificationSettingInput!
  ): GroupNotificationSetting!
  addUsersToGroup(groupId: Int!, users: [AddGroupUser!]!): [GroupMember!]!
  updateGroupMember(userId: Int!, groupId: Int!, admin: Boolean!): GroupMember!
  removeMembers(groupId: Int!, userIds: [Int!]!): [GroupMember!]!
  createEvacuationEvent(groupId: Int!, msg: String!): EvacuationEvent!
  updateEvacuationEvent(evacuationId: Int!, status: String!): EvacuationEvent!
  createEvacuationEventResponse(evacuationId: Int!, response: String!): EvacuationResponse!
  createOrganization(
    name: String!
    organizationNotificationSetting: OrganizationNotificationSettingInput!
  ): Organization!
  deleteOrganization(organizationId: Int!): Organization!
  updateOrganizationNotificationOptions(
    organizationId: Int!
    organizationNotificationSetting: OrganizationNotificationSettingInput!
  ): OrganizationNotificationSetting!
  inviteToOrganization(
    organizationId: Int!
    users: [InvitedOrganizationUser!]!
    groupIds: [Int!]
  ): [OrganizationMember!]
  updateOrgInvite(organizationId: Int!, status: String!): OrganizationMember!
  removeFromOrganization(organizationId: Int!, userIds: [Int!]!): [OrganizationMember!]
  createOrganizationAnnouncement(
    organizationId: Int!
    title: String!
    description: String
    groupIds: [Int!]
  ): Announcement!
  deleteOrganizationAnnouncement(announcementId: Int!): Announcement!
}

type Auth {
  token: String!
  refreshToken: String!
  user: User!
}

type GetOrganizationMembers {
  data: [OrganizationMember!]!
  cursor: Int
}

type GetAnnouncements {
  data: [Announcement!]!
  cursor: Int
}

type GetGroupMembers {
  data: [GroupMember!]!
  cursor: Int
}

type GetEvacuationEvents {
  data: [EvacuationEvent!]!
  cursor: Int
}

type UserOrganization {
  id: Int!
  name: String!
  notificationSetting: OrganizationNotificationSetting
  members: [OrganizationMember!]
  announcements: [Announcement!]
  groups: [GroupMember!]
}

type Organization {
  id: Int!
  name: String!
  notificationSetting: OrganizationNotificationSetting

  members: [OrganizationMember!]
  announcements: [Announcement!]
  groups: [Group!]
}

type OrganizationNotificationSetting {
  id: Int!
  organizationId: Int!
  emailEnabled: Boolean!
  pushEnabled: Boolean!
  smsEnabled: Boolean!
}

input OrganizationNotificationSettingInput {
  emailEnabled: Boolean!
  pushEnabled: Boolean!
  smsEnabled: Boolean!
}

type OrganizationMember {
  id: Int!
  userId: Int!
  organizationId: Int!
  status: String!
  admin: Boolean!

  user: User
  organization: Organization
}

type Announcement {
  id: Int!
  title: String!
  date: String!
  description: String
  organizationId: Int!
  createdBy: Int!

  organization: Organization
}

type User {
  id: Int!
  email: String!
  phoneNumber: String
  firstName: String
  lastName: String
  passwordHash: String
  accountCreated: Boolean!

  organizations: [OrganizationMember!]
  groups: [GroupMember!]
  evacuationResponses: [EvacuationResponse!]
}

input AddGroupUser {
  admin: Boolean!
  userId: Int!
}

input InvitedOrganizationUser {
  admin: Boolean!
  email: String!
}

type Group {
  id: Int!
  organizationId: Int!
  name: String!
  notificationSetting: GroupNotificationSetting

  members: [GroupMember!]
  evacuationEvents: [EvacuationEvent!]
}

type UserGroup {
  id: Int!
  organizationId: Int!
  name: String!
  members: [GroupMember!]
  evacuationEvents: [EvacuationEvent!]
}

type GroupMember {
  id: Int!
  userId: Int!
  groupId: Int!
  organizationMemberId: Int!
  admin: Boolean!

  organizationMember: OrganizationMember
  group: Group
  user: User
}
type GroupNotificationSetting {
  id: Int!
  groupId: Int!
  emailEnabled: Boolean!
  pushEnabled: Boolean!
  smsEnabled: Boolean!
}
input GroupNotificationSettingInput {
  emailEnabled: Boolean!
  pushEnabled: Boolean!
  smsEnabled: Boolean!
}
type EvacuationEvent {
  id: Int!
  startTime: String!
  endTime: String
  createdBy: Int!
  status: String!
  groupId: Int!
  message: String

  responses: [EvacuationResponse!]
}
type EvacuationResponse {
  id: Int!
  response: String!
  userId: Int!
  time: String!
  evacuationId: Int!

  user: User
}

enum Scopes {
  GROUP_ADMIN
  ORG_ADMIN
}

enum MemberInviteStatus {
  ACCEPTED
  PENDING
  DECLINED
}
