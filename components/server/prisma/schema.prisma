// to make schema in db
// npx prisma migrate dev --preview-feature --skip-generate --name "init"

// to generate so can be used in db
// npx prisma generate


generator client {
  provider = "prisma-client-js"
   binaryTargets   = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  Admin
  Member
}

model User {
  id                     Int     @id @default(autoincrement())
  role                   Role
  username               String

  localAuth              LocalAuth?
  googleAuth             GoogleAuth?
  
  friendRequests         FriendRequest[] @relation("receivedRequests")
  sentFriendRequests     FriendRequest[] @relation("sentRequests")
  collected              CollectedMinibrand[]
}


model LocalAuth {
  email                  String  @unique
  passwordHash           String
  userId                 Int     @unique

  user                   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model GoogleAuth {
  id                    String @unique
  email                 String @unique
  userId                Int    @unique

  user                   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CollectedMinibrand {
  id                    Int      @id @default(autoincrement())
  minibrandId           Int
  userId                Int

  dateCollected         String
  quantity              Int

  minibrand             MiniBrand @relation(fields: [minibrandId], references: [id], onDelete: Cascade)
  user                  User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, minibrandId])
  @@index([userId])
}


model MiniBrand {
  id                    Int      @id @default(autoincrement())
  name                  String
  typeId                Int
  seriesId              Int
  imgUrl                String
  tags                  MiniBrandTag[]

  type                  MiniBrandType @relation(fields: [typeId], references: [id], onDelete: Cascade)
  series                MiniBrandSeries @relation(fields: [seriesId], references: [id], onDelete: Cascade)
  collectors            CollectedMinibrand[]
}

model MiniBrandTag {
  id                    Int      @id @default(autoincrement())
  value                 String   @unique

  miniBrands            MiniBrand[]
}

model MiniBrandType {
  id                    Int      @id @default(autoincrement())
  value                 String   @unique

  miniBrands            MiniBrand[]
}

model MiniBrandSeries {
  id                    Int      @id @default(autoincrement())
  value                 String   @unique

  miniBrands            MiniBrand[]
}

enum FriendRequestStatus {
  Accepted
  Pending
  Declined
}

model FriendRequest {
  id                    Int      @id @default(autoincrement())
  senderId              Int
  receiverId            Int

  status                FriendRequestStatus

  receiver              User @relation(name: "receivedRequests", fields: [receiverId], references: [id], onDelete: Cascade)
  sender                User @relation(name: "sentRequests", fields: [senderId], references: [id], onDelete: Cascade) 

  @@unique([senderId, receiverId])
}
